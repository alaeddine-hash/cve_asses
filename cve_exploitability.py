import asyncio
import aiohttp
import json
from bs4 import BeautifulSoup
from langchain_openai import ChatOpenAI

from get_cve import get_filtered_cves
from on_the_moon import extract_advisory_links, scrape_urls

def create_prompt_for_exploitability_analysis(cve):
    prompt = f"""
You are a cybersecurity expert specializing in vulnerability assessment. Your task is to analyze the following CVE details and advisory contents to assess the exploitability of the vulnerability.

**CVE Details:**
"""
    # Include all CVE details
    for key, value in cve.items():
        if key != 'advisory_contents':
            formatted_key = ' '.join(word.capitalize() for word in key.split('_'))
            if isinstance(value, (dict, list)):
                value_str = json.dumps(value, indent=2)
                prompt += f"- **{formatted_key}:**\n```\n{value_str}\n```\n"
            else:
                prompt += f"- **{formatted_key}:** {value}\n"

    prompt += """
**Advisory Contents:**
"""
    # Include advisory contents if available
    for advisory in cve.get('advisory_contents', []):
        prompt += f"\n- **URL:** {advisory['url']}\n**Content:**\n{advisory['content']}\n"

    prompt += """
**Instructions:**

Based on the provided information, assess the exploitability of the vulnerability. Specifically, determine:

1. **Exploit Availability (exploit_available):**
   - Indicate whether a public exploit is available for this vulnerability.
   - Possible values: `"yes"`, `"no"`, or `"unknown"`.

2. **Exploit Complexity (exploit_complexity):**
   - Assess the complexity of exploiting the vulnerability.
   - Possible values: `"low"`, `"medium"`, `"high"`.

3. **Required Skills (required_skills):**
   - Describe the level of skill required to exploit the vulnerability.
   - Possible values: `"novice"`, `"intermediate"`, `"advanced"`.

4. **Additional Notes (notes):**
   - Provide any additional relevant information about the exploitability.
   - Keep it concise (maximum 3 sentences).

**Output Format:**

Provide your response in valid JSON format with the following structure (do not include any code block delimiters or language specifiers):

{
  "exploit_available": "yes/no/unknown",
  "exploit_complexity": "low/medium/high",
  "required_skills": "novice/intermediate/advanced",
  "notes": "Additional information about the exploitability."
}

**Important Guidelines:**

- **Do not include** any explanations, introductions, or conclusions outside the JSON object.
- **Provide only** the JSON object.
- **Ensure** the JSON is properly formatted and parsable.
"""
    return prompt

def process_cve_exploitability(cve):
    print(f"Processing CVE ID: {cve['cve_id']}")
    references = extract_advisory_links(cve)

    # Scrape the advisory contents
    try:
        cve['advisory_contents'] = asyncio.run(scrape_urls(references))
    except Exception as e:
        print(f"Error during advisory scraping: {e}")
        cve['advisory_contents'] = []

    # Create the prompt
    prompt = create_prompt_for_exploitability_analysis(cve)

    # Call the LLM
    try:
        # Initialize the LLM
        llm = ChatOpenAI(
            model_name='gpt-4',  # Or 'gpt-3.5-turbo'
            temperature=0.0,
        )

        # Get the response from the LLM
        response = llm.invoke(prompt)
        output_text = response.content.strip()

        # Clean the output_text by removing code block delimiters and language specifiers
        output_text = output_text.strip()
        if output_text.startswith('```'):
            output_text = output_text.strip('`')
            # Remove the language specifier if present
            if output_text.startswith('json'):
                output_text = output_text[4:].strip()  # Remove 'json' and any whitespace

        # Parse the JSON output
        try:
            result = json.loads(output_text)
            # Update the CVE with new attributes
            cve['exploit_available'] = result.get('exploit_available')
            cve['exploit_complexity'] = result.get('exploit_complexity')
            cve['required_skills'] = result.get('required_skills')
            cve['notes'] = result.get('notes')
            print(f"Exploitability Assessment for CVE ID {cve['cve_id']}:")
            print(f"  Exploit Available: {cve['exploit_available']}")
            print(f"  Exploit Complexity: {cve['exploit_complexity']}")
            print(f"  Required Skills: {cve['required_skills']}")
            print(f"  Notes: {cve['notes']}")
        except json.JSONDecodeError as e:
            print(f"Error parsing JSON response for CVE ID {cve['cve_id']}: {e}")
            print("LLM Output:")
            print(output_text)
            return  # Skip further processing if parsing fails

        # Optionally, insert or update the CVE data in your database or save it as needed

    except Exception as e:
        print(f"Error during LLM processing for CVE ID {cve['cve_id']}: {e}")

    print("-" * 60)

def main():
    # Retrieve CVEs
    cves = get_filtered_cves(2024, 2024, 10)  # Adjust as needed

    for cve in cves:
        process_cve_exploitability(cve)

    # Optionally, save the augmented CVEs to a file or database
    # For example, write to a JSON file
    # with open('cve_exploitability_assessment.json', 'w') as f:
    #     json.dump(cves, f, indent=2)

if __name__ == "__main__":
    main()
